name: Gitbook Offline Renderer

env:
  GITBOOK_USER: gst+gitbookbot@tigergraph.com
  DOCKERHUB_USER: gstbot
  DOCKER_IMAGE_TAG: tgexternal/document:latest

on:
  push:
    branches: [master]
  pull_request:
    branches: ["*"]
  schedule:
    - cron: "0 0 * * *" # update every day

jobs:
  build:
    name: Build Docker
    runs-on: ubuntu-latest
    steps:
      - name: Check out code into the source code repository
        uses: actions/checkout@v2

      - name: Install Selenium and Webdriver Manager
        run: sudo python3 -m pip install -U selenium webdriver_manager
      - name: Download Exported Data
        run: python3 ./tools/export_gitbook.py --headless --user ${{ env.GITBOOK_USER}} --password ${{ secrets.GITBOOK_PASSWORD }} --target ./gitbook.zip

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: "13.12.0"
      - name: Setup YARN
        run: |
          curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
          echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
          sudo apt update && sudo apt install yarn
          sudo apt update && sudo apt install --no-install-recommends yarn
      - name: Cache node_modules
        uses: actions/cache@v1
        env:
          cache-name: cache-node-modules
        with:
          path: ./build_temp/source/node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}
      - name: Cache Go Modules
        uses: actions/cache@v1
        env:
          cache-name: cache-go-modules
        with:
          path: ~/go
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('go.mod') }}
      - name: Build Docker Image
        run: |
          make docker-image
          docker login -u ${{ env.DOCKERHUB_USER }} -p ${{ secrets.DOCKERHUB_PASSWORD }}
          docker tag document:latest ${{ env.DOCKER_IMAGE_TAG }}
      - name: Push Docker Image
        if: ${{ github.event_name == 'schedule' || github.event_name == 'push' }}
        run: |
          docker push ${{ env.DOCKER_IMAGE_TAG }}
